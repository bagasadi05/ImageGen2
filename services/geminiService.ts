import { GoogleGenAI, Type } from "@google/genai";

const apiKey = process.env.API_KEY;
if (!apiKey) {
  // In a real app, you might want to show a message to the user or disable functionality.
  // For this environment, we assume the key is always present.
  console.error("API_KEY environment variable not set. Image generation will fail.");
}

const ai = new GoogleGenAI({ apiKey: apiKey || '' });

export const generateImage = async (prompt: string): Promise<{ imageUrl: string; seed: string }> => {
  if (!apiKey) {
    throw new Error("API Key is not configured. Please set the API_KEY environment variable.");
  }
  
  try {
    const response = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: '1:1',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const generatedImage = response.generatedImages[0];
      const base64ImageBytes: string = generatedImage.image.imageBytes;
      const seed = String((generatedImage as any).seed ?? 'N/A');
      return {
        imageUrl: `data:image/jpeg;base64,${base64ImageBytes}`,
        seed: seed,
      };
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`${error.message}`);
    }
    throw new Error("An unknown error occurred while generating the image.");
  }
};


export const generateKeywords = async (imagePrompt: string): Promise<string[]> => {
    if (!apiKey) {
        throw new Error("API Key is not configured.");
    }
    try {
        const fullPrompt = `Based on the following image description, generate a list of 40-50 relevant, commercial keywords suitable for a stock photography site like Adobe Stock. Focus on objects, concepts, themes, colors, and artistic style. Do not use phrases, only single words or very short compound words. Separate each keyword with a comma. The description is: "${imagePrompt}"`;

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: fullPrompt,
        });

        const text = response.text;
        if (text) {
            return text.split(',').map(k => k.trim().toLowerCase()).filter(Boolean);
        }
        return [];

    } catch (error) {
        console.error("Error generating keywords with Gemini API:", error);
        throw new Error("Failed to generate keywords.");
    }
};

export const generateEnhancedPrompts = async (baseKeywords: string, artStyle: string): Promise<string[]> => {
    if (!apiKey) {
        throw new Error("API Key is not configured.");
    }
    try {
        const styleInstruction = artStyle === 'Otomatis' 
            ? 'Each prompt should have a varied, randomly selected artistic style (e.g., photorealistic, cinematic, 3d render, fantasy art).' 
            : `Every prompt must strictly incorporate the '${artStyle}' artistic style.`;

        const systemInstruction = `You are an expert prompt engineer for advanced text-to-image AI models. Your task is to generate 10 highly detailed, commercially valuable, and artistically compelling image prompts.`;

        const userPrompt = `Based on the core keywords "${baseKeywords}", create 10 unique prompts.
${styleInstruction}
Each prompt must be a single, coherent sentence.
Describe a clear subject, the environment, the composition (e.g., close-up, wide shot, rule of thirds), dramatic lighting (e.g., cinematic lighting, volumetric rays, golden hour), and a rich atmosphere.
Focus on creating prompts that will produce stunning, high-quality images suitable for a premium stock photography marketplace like Adobe Stock.
The final output must be a valid JSON array of 10 strings.`;

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: userPrompt,
            config: {
                systemInstruction: systemInstruction,
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.ARRAY,
                    items: {
                        type: Type.STRING
                    }
                }
            }
        });

        const jsonString = response.text;
        const prompts = JSON.parse(jsonString);

        if (Array.isArray(prompts) && prompts.every(p => typeof p === 'string')) {
            return prompts;
        } else {
            throw new Error("API returned an invalid data structure for prompts.");
        }

    } catch (error) {
        console.error("Error generating enhanced prompts with Gemini API:", error);
        throw new Error("Failed to generate high-quality prompts.");
    }
};
